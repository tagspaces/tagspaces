{
  "name": "tagspaces",
  "version": "0.0.0",
  "description": "TagSpaces Core Repository",
  "keywords": [
    "electron",
    "react",
    "tagging",
    "file-manager"
  ],
  "homepage": "https://www.tagspaces.org",
  "bugs": {
    "url": "https://github.com/tagspaces/tagspaces/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tagspaces/tagspaces/"
  },
  "license": "AGPL-3.0",
  "author": {
    "name": "TagSpaces GmbH",
    "email": "info@tagspaces.org",
    "url": "https://www.tagspaces.org"
  },
  "main": "./.erb/dll/main.bundle.dev.js",
  "scripts": {
    "browserslist:update": "npx browserslist@latest --update-db",
    "bs": "npm run build && npm run run-electron",
    "bs-dev": "npx cross-env DEBUG_PROD=true npm run build && npm run run-electron",
    "erb-link": "ln -s \"$(pwd)/.erb\" \"$(pwd)/release/app/.erb\"",
    "prebuild": "rimraf release/app/dist && npm run prepare-node && npm run generate-extensions",
    "build": "npm run prebuild && concurrently \"npm run build:main\" \"npm run build:renderer\" && node -r ts-node/register ./.erb/scripts/link-modules.ts",
    "build-e2e": "node scripts/setup-tests.js && cross-env E2E_BUILD=true NODE_ENV=test npm run build",
    "build-e2e-dev": "ts-node ./.erb/scripts/clean.js && npm run prepare-node && cross-env E2E_BUILD=true concurrently \"npm run build:main\" \"npm run build:renderer\" \"npm run build:web\"",
    "build-e2e-web": "node scripts/setup-tests.js && cross-env E2E_BUILD=true NODE_ENV=test && npm run prepare-web-pro",
    "build:cordova": "cross-env NODE_ENV=production TS_NODE_TRANSPILE_ONLY=true webpack --config ./.erb/configs/webpack.config.cordova.prod.ts",
    "build:cordova:dev": "cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true webpack --config ./.erb/configs/webpack.config.cordova.dev.ts",
    "build:dll": "cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true webpack --config ./.erb/configs/webpack.config.renderer.dev.dll.ts",
    "build:main": "cross-env NODE_ENV=production TS_NODE_TRANSPILE_ONLY=true webpack --config ./.erb/configs/webpack.config.main.prod.ts",
    "build:renderer": "cross-env NODE_ENV=production TS_NODE_TRANSPILE_ONLY=true webpack --config ./.erb/configs/webpack.config.renderer.prod.ts",
    "build:web": "rimraf web/dist && cross-env NODE_ENV=production TS_NODE_TRANSPILE_ONLY=true webpack --config ./.erb/configs/webpack.config.web.prod.ts",
    "build:web:dev": "rimraf web/dist && cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true webpack --config ./.erb/configs/webpack.config.web.dev.ts",
    "bump-version": "npm run third-party && cd release/app && yarn version && cd .. && npm run version-meta",
    "clean": "npx rimraf node_modules && npx rimraf src/renderer/dist",
    "clean-maps": "rimraf --glob release/app/dist/**/*.map && rimraf --glob web/dist/*.map",
    "clean-pro": "npm run clean-maps",
    "cordova-add-android": "cd cordova && cordova platform add android@9.1.0 && cd ..",
    "cordova-add-ios": "cd cordova && cordova platform add ios && cd ..",
    "cordova-create-app": "cordova create ./cordova org.tagspaces.iosn TagSpaces",
    "cordova-list-emulators": "cd cordova && cordova run --list --emulator && cd ..",
    "cordova-remove-android": "cd cordova && cordova platform remove android && cd ..",
    "cordova-remove-ios": "cd cordova && cordova platform remove ios && cd ..",
    "dev": "npm run prepare-node && npm run generate-extensions && npm run link-ext && npm run start",
    "dev-open-file": "git apply run-with-args.patch && npm run dev",
    "generate-extensions": "node -r ts-node/register scripts/generateExtensionsConfig.ts",
    "generate-jwt": "node scripts/jwt_generate.js",
    "postinstall": "npx rimraf node_modules/canvas && ts-node .erb/scripts/check-native-dep.js && electron-builder install-app-deps && npm run prepare-node && node -r ts-node/register ./.erb/scripts/link-modules.ts && npm run build:dll",
    "install-ext-node": "rimraf release/app/node_modules && cd ./release/app && npm install && cd ../.. && npm run generate-extensions",
    "install-ext-node-check": "npx cross-env PD_PLATFORM=node node scripts/checkWSinstalled.js",
    "install-ext-node-linux": "rimraf release/app/node_modules && npm install --prefix ./release/app --platform=linux --arch=x64 && npm run generate-extensions",
    "install-ext-node-mac": "rimraf release/app/node_modules && npm install --prefix ./release/app --platform=darwin --arch=x64 && npm run generate-extensions",
    "install-ext-node-mac-arm64": "rimraf release/app/node_modules && npm install --prefix ./release/app --platform=darwin --arch=arm64 && npm run generate-extensions",
    "install-ext-node-win": "rimraf release/app/node_modules && npm install --prefix ./release/app --platform=win32 --arch=x64 && npm run generate-extensions",
    "install-ext-web": "rimraf release/app/node_modules && cd ./release/app && npm install && cd ../.. && npm run generate-extensions",
    "install-ext-web-check": "npx cross-env PD_PLATFORM=web node scripts/checkWSinstalled.js",
    "link-ext": "node -r ts-node/register scripts/link-ext.ts",
    "lint": "cross-env NODE_ENV=development eslint . --ext .js,.jsx,.ts,.tsx",
    "lint-fix": "npm run --silent lint --fix; exit 0",
    "postlint-fix": "prettier --ignore-path .eslintignore --single-quote --write '**/*.{*{js,jsx,json},babelrc,eslintrc,prettierrc,stylelintrc}'",
    "lint-styles": "stylelint --ignore-path .eslintignore '**/*.*(css|scss)' --syntax scss",
    "lint-styles-fix": "npm run --silent lint-styles --fix; exit 0",
    "postlint-styles-fix": "prettier --ignore-path .eslintignore --single-quote --write '**/*.{css,scss}'",
    "linux-fix-sandbox": "sudo chown root:root node_modules/electron/dist/chrome-sandbox && sudo chmod 4755 node_modules/electron/dist/chrome-sandbox",
    "minio-start": "./tests/bin/minio server ./tests/testdata-tmp/file-structure",
    "minio-start-windows": ".\\tests\\bin\\minio.exe server ./tests/testdata-tmp/file-structure",
    "s3server-start": "cross-env NODE_OPTIONS=--openssl-legacy-provider ts-node ./scripts/startS3server.js",
    "scope-login": "npm login --scope=@tagspacespro --registry=https://npm.pkg.github.com",
    "package": "ts-node ./.erb/scripts/clean.js && npm run build && electron-builder build --publish never && npm run build:dll",
    "package-android": "npm run build:cordova && cd cordova && npm install && cordova build --release android",
    "package-ci": "npm run postinstall && npm run build && electron-builder --publish always",
    "package-linux": "npm run install-ext-node-linux && ts-node ./.erb/scripts/clean.js && npm run build && electron-builder --linux --config resources/builder.json",
    "package-linux-pro": "npm run install-ext-node-linux && ts-node ./.erb/scripts/clean.js && npm run build && electron-builder --linux --config node_modules/@tagspacespro/tagspacespro/resources/builder-pro.json",
    "package-mac": "npm run install-ext-node-mac && ts-node ./.erb/scripts/clean.js && npm run build && electron-builder --mac --x64 --config resources/builder.json",
    "package-mac-arm64": "npm run install-ext-node-mac-arm64 && ts-node ./.erb/scripts/clean.js && npm run build && electron-builder --mac --arm64 --config resources/builder.json",
    "package-mac-arm64-pro": "npm run install-ext-node-mac-arm64 && ts-node ./.erb/scripts/clean.js && npm run build && electron-builder --mac --arm64 --config node_modules/@tagspacespro/tagspacespro/resources/builder-pro.json",
    "package-mac-pro": "npm run install-ext-node-mac && ts-node ./.erb/scripts/clean.js && npm run build && electron-builder --mac --x64 --config node_modules/@tagspacespro/tagspacespro/resources/builder-pro.json",
    "package-mac-pro-dev": "npx cross-env DEBUG_PROD=true && npm run package-mac-pro",
    "package-pro": "rimraf app/node_modules && node scripts/enablepro.js && npm run install-ext-node && npm run build && npm run package-web-pro && npm run clean-maps && npm run package-win-pro && npm run package-linux-pro && npm run package-web-pro && npm run package-mac-pro",
    "package-web": "npm run prepare-web && zip -r ../builds/tagspaces-web.zip web",
    "package-web-pro": "npm run prepare-web-pro && zip -r ../builds/tagspaces-pro-web.zip web",
    "package-win": "npm run install-ext-node-win && ts-node ./.erb/scripts/clean.js && npm run build && electron-builder --win --x64 --config resources/builder.json",
    "package-win-pro": "npm run install-ext-node-win && ts-node ./.erb/scripts/clean.js && npm run build && electron-builder --win --x64 --config node_modules/@tagspacespro/tagspacespro/resources/builder-pro.json",
    "paste-android-linux": "adb shell input text '$(xclip -selection c -o)'",
    "paste-android-macos": "adb shell input text \"'$(pbpaste)'\"",
    "playwright-show-trace": "npx playwright show-trace \"test-results/folder.pw.e2e.js-TST01---Folder-management-TST0102---Reload-folder-web-minio-electron-/trace.zip\"",
    "postinstall-aws-check": "cross-env PD_PLATFORM=aws node scripts/postinstall.js",
    "postinstall-cordova-check": "cross-env PD_PLATFORM=cordova node scripts/postinstall.js",
    "postinstall-electron-check": "cross-env PD_PLATFORM=electron node scripts/postinstall.js",
    "postinstall-electron-debug": "cross-env PD_PLATFORM=electron npm install --foreground-scripts @tagspaces/tagspaces-platforms@1.3.45",
    "postinstall-node-check": "cross-env PD_PLATFORM=node node scripts/postinstall.js",
    "postinstall-web-check": "cross-env PD_PLATFORM=web node scripts/postinstall.js",
    "precommit": "lint-staged",
    "prepare": "husky install",
    "prepare-cordova": "npm run install-ext-web-check && npm run postinstall-cordova-check && rimraf cordova/www/dist && rimraf cordova/www/node_modules && shx cp -rL release/app/node_modules cordova/www && shx cp LICENSE.txt cordova/www",
    "prepare-cordova-pro": "npm run install-ext-web-check && npm run postinstall-cordova-check && rimraf cordova/www/dist && rimraf cordova/www/node_modules && shx cp -rL release/app/node_modules cordova/www && shx cp node_modules/@tagspacespro/tagspacespro/EULA.txt cordova/www",
    "prepare-node": "npm run install-ext-node-check && npm run postinstall-electron-check",
    "prepare-web": "npm run install-ext-web-check && npm run postinstall-aws-check && rimraf web/modules && shx mkdir -p web/modules/@tagspaces/extensions && shx cp -rL release/app/node_modules/@tagspaces/extensions/* web/modules/@tagspaces/extensions/ && shx cp LICENSE.txt web && npm run build:web && node scripts/genswconf.js && npm run clean-maps",
    "prepare-web-pro": "npm run install-ext-web-check && npm run postinstall-aws-check && rimraf web/modules && shx mkdir -p web/modules/@tagspaces/extensions && shx cp -rL release/app/node_modules/@tagspaces/extensions/* web/modules/@tagspaces/extensions/ && npm run prepare-web-pro-ext && shx cp node_modules/@tagspacespro/tagspacespro/EULA.txt web && npm run build:web && node scripts/genswconf.js && npm run clean-maps",
    "prepare-web-pro-dev": "npm run install-ext-web-check && npm run postinstall-aws-check && rimraf web/modules && shx mkdir -p web/modules/@tagspaces/extensions && shx cp -rL release/app/node_modules/@tagspaces/extensions/* web/modules/@tagspaces/extensions/ && npm run prepare-web-pro-ext && shx cp node_modules/@tagspacespro/tagspacespro/EULA.txt web && npm run build:web:dev && node scripts/genswconf.js",
    "prepare-web-pro-ext": "shx mkdir -p web/modules/@tagspacespro/extensions && shx cp -rL release/app/node_modules/@tagspacespro/extensions/* web/modules/@tagspacespro/extensions/",
    "prettier-check": "prettier --check --ignore-path=.prettierignore \"**/*.{js,jsx,json,ts,tsx,yml}\"",
    "prettier-format": "prettier --ignore-path=.prettierignore --write \"**/*.{js,jsx,json,ts,tsx,yml}\"",
    "rebuild": "electron-rebuild --parallel --types prod,dev,optional --module-dir release/app",
    "run-android": "npm run prepare-cordova && npm run build:cordova && cd cordova && cordova run android && cd ..",
    "run-android-dev": "npm run prepare-cordova && npm run build:cordova:dev && cd cordova && cordova run android && cd ..",
    "run-electron": "npx electron ./release/app/dist/main/main.js",
    "run-ios-dev": "npm run prepare-cordova && npm run build:cordova:dev && cd cordova && cordova run ios && cd ..",
    "run-web": "npm run prepare-web-pro && node scripts/webserver.js",
    "run-web-aws": "npm run prepare-web-pro && node scripts/webserver.js",
    "run-web-dev": "npm run prepare-web-pro-dev && node scripts/webserver.js",
    "run-web-server": "node scripts/webserver.js",
    "setup-tests": "node scripts/setup-tests.js",
    "skip:husky:pre-commit": "node -e \"require('fs').rename('./.git/hooks/pre-commit', './.git/hooks/pre-commit.disabled', function(err) { if (err) console.log(err); console.log('File successfully renamed!') })\"",
    "sort-package-json": "npx sort-package-json",
    "source-map": "npm run source-map-app && npm run source-map-web && npm run source-map-cordova",
    "source-map-app": "npx source-map-explorer src/renderer/dist/*.* --html reports/source-map-app.html",
    "source-map-cordova": "npx source-map-explorer cordova/www/dist/*.* --html reports/source-map-cordova.html",
    "source-map-web": "npx source-map-explorer web/dist/*.* --html reports/source-map-web.html",
    "prestart": "cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true webpack --config ./.erb/configs/webpack.config.main.dev.ts",
    "start": "ts-node ./.erb/scripts/check-port-in-use.js && npm run prestart && npm run start:renderer",
    "start:main": "concurrently -k \"cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true webpack --watch --config ./.erb/configs/webpack.config.main.dev.ts\" \"electronmon .\"",
    "start-main-debug": "npm run dev --inspect=5858 --remote-debugging-port=9223",
    "start:preload": "cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true webpack --config ./.erb/configs/webpack.config.preload.dev.ts",
    "start:renderer": "cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true webpack serve --config ./.erb/configs/webpack.config.renderer.dev.ts",
    "test": "jest",
    "test-clone-data": "rimraf tests/testdata && git clone https://github.com/tagspaces/testdata tests/testdata",
    "test-playwright": "npm run test-refresh-data && cross-env npx playwright test --config ./playwright.config.js -g '^(?!.*\\b_pro\\b).*\\belectron\\b.*'",
    "test-playwright-pro": "npm run test-refresh-data && cross-env npx playwright test --config ./playwright.config.js -g '/\\belectron\\b/'",
    "test-playwright-s3": "npx playwright install --with-deps && cross-env NODE_OPTIONS=--openssl-legacy-provider npx playwright test --config ./playwright.config.s3.js -g '/\\bminio\\b/'",
    "test-playwright-minio": "npm run test-refresh-data && cross-env npx playwright test --config ./playwright.config.minio.js -g '/\\bminio\\b/'",
    "test-playwright-web": "npx playwright install --with-deps && cross-env NODE_OPTIONS=--openssl-legacy-provider npx playwright test --config ./playwright.config.web.js -g '/\\bweb\\b/'",
    "test-playwright-web-headless": "npx playwright install --with-deps && cross-env NODE_OPTIONS=--openssl-legacy-provider HEADLESS_MODE=true npx playwright test --config ./playwright.config.web.js -g '/\\bweb\\b/'",
    "test-playwright-web-minio": "npm run test-refresh-data && cross-env npx playwright test --config ./playwright.config.web.minio.js -g '/\\bweb\\b/'",
    "test-playwright-web-headless-minio": "npm run test-refresh-data && cross-env HEADLESS_MODE=true npx playwright test --config ./playwright.config.web.minio.js -g '/\\bweb\\b/'",
    "test-pw-web-browsers": "npm run test-refresh-data && cross-env DEBUG=pw:api npx playwright test --config ./playwright.config.web.browsers.js -g '/\\bweb\\b/'",
    "test-refresh-data": "rimraf tests/testdata-tmp && shx mkdir -p tests/testdata-tmp/file-structure && shx cp -rL tests/testdata/file-structure tests/testdata-tmp && npx playwright install --with-deps",
    "test-unit": "npx playwright test --config ./playwright.unit.js",
    "test-watch": "npm run test --watch",
    "third-party": "npx generate-license-file --input package.json --output src/renderer/third-party.txt --overwrite",
    "ts-extension-symlink": "rimraf app/node_modules/@tagspaces/extensions && cd app/node_modules/@tagspaces && ln -s ../../../extensions extensions && cd ../../..",
    "type-check": "npm run typescript-clean && tsc --noEmit",
    "typescript-clean": "tsc --build --clean",
    "update-changelog": "git log v6.0.0..HEAD --no-merges --format=%B > CHANGELOG.TXT",
    "update-changelog-pro": "cd tagspacespro && git log v5.6.2..HEAD --no-merges --format=%B > ../../CHANGELOG-PRO.TXT",
    "update-i18n": "./tx pull -a -f",
    "version-meta": "node scripts/versionmeta.js"
  },
  "browserslist": [],
  "dependencies": {
    "@aws-amplify/ui-react": "^1.2.26",
    "@date-io/date-fns": "^2.17.0",
    "@emotion/react": "11.11.1",
    "@emotion/styled": "11.11.0",
    "@gorillastack/jmespath": "^1.3.0",
    "@mui/icons-material": "^5.15.19",
    "@mui/lab": "5.0.0-alpha.170",
    "@mui/material": "^5.15.19",
    "@mui/x-date-pickers": "^5.0.20",
    "@tagspaces/tagspaces-common": "4.5.33",
    "@tagspaces/tagspaces-common-aws3": "4.5.33",
    "@tagspaces/tagspaces-common-cordova": "4.5.33",
    "@tagspaces/tagspaces-indexer": "4.5.33",
    "@tagspaces/tagspaces-md": "4.5.19",
    "aws-amplify": "^4.3.8",
    "classnames": "^2.3.1",
    "clone": "^2.1.2",
    "coordinate-parser": "^1.0.7",
    "crypto-js": "^4.1.1",
    "date-fns": "^2.29.3",
    "dompurify": "^3.0.11",
    "echarts": "^5.5.1",
    "electron-context-menu": "^3.6.1",
    "electron-debug": "^3.2.0",
    "electron-log": "^4.4.8",
    "electron-updater": "^6.1.4",
    "electron-window-state": "^5.0.3",
    "exifr": "^7.1.3",
    "file-saver": "^2.0.5",
    "find-free-ports": "^3.1.1",
    "fs-extra": "^10.0.0",
    "fscreen": "^1.2.0",
    "fuse.js": "^6.6.2",
    "geolocation-utils": "^1.2.5",
    "html2canvas": "^1.3.3",
    "i18next": "^23.4.6",
    "i18next-http-backend": "^2.2.2",
    "leaflet": "^1.9.4",
    "mgrs": "^1.0.0",
    "open-location-code": "^1.0.3",
    "open-location-code-typescript": "^1.5.0",
    "papaparse": "^5.4.1",
    "pdfjs-dist": "^4.7.76",
    "picomatch": "^3.0.1",
    "qrcode.react": "^3.1.0",
    "rc-table": "^7.8.0",
    "react": "18.2.0",
    "react-beautiful-dnd": "^13.1.1",
    "react-best-gradient-color-picker": "^3.0.7",
    "react-color": "^2.19.3",
    "react-dnd": "^16.0.1",
    "react-dnd-html5-backend": "^16.0.1",
    "react-dom": "18.2.0",
    "react-draggable": "^4.4.4",
    "react-hotkeys": "^2.0.0",
    "react-i18next": "^13.2.2",
    "react-image-gallery": "1.3.0",
    "react-infinite-scroller": "^1.2.6",
    "react-leaflet": "^4.2.1",
    "react-leaflet-fullscreen": "^4.1.1",
    "react-qrcode-logo": "^2.8.0",
    "react-redux": "^8.0.2",
    "react-slick": "^0.30.2",
    "react-virtuoso": "^4.1.0",
    "redux": "^4.2.0",
    "redux-persist": "^5.10.0",
    "redux-thunk": "^2.4.1",
    "remove-markdown": "^0.5.0",
    "semver": "^7.3.5",
    "source-map-support": "^0.5.21",
    "tga-js": "1.1.1",
    "ts-react-splitter": "^3.0.0",
    "use-state-with-callback": "^2.0.3",
    "utif": "github:photopea/UTIF.js",
    "uuid": "^9.0.0"
  },
  "optionalDependencies": {
    "@tagspacespro/tagspacespro": "5.0.80"
  },
  "devDependencies": {
    "@electron/notarize": "^2.3.2",
    "@electron/rebuild": "^3.3.0",
    "@playwright/test": "1.46.1",
    "@pmmmwh/react-refresh-webpack-plugin": "^0.5.15",
    "@svgr/webpack": "^8.1.0",
    "@teamsupercell/typings-for-css-modules-loader": "^2.5.2",
    "@testing-library/jest-dom": "^6.1.3",
    "@testing-library/react": "^14.0.0",
    "@types/jest": "^29.5.5",
    "@types/leaflet": "^1.9.4",
    "@types/node": "20.6.2",
    "@types/react": "^18.2.21",
    "@types/react-dom": "^18.2.7",
    "@types/react-image-gallery": "^1.2.4",
    "@types/react-redux": "^7.1.24",
    "@types/react-router-dom": "^5.3.3",
    "@types/react-test-renderer": "^18.0.1",
    "@types/redux-logger": "^3.0.9",
    "@types/terser-webpack-plugin": "^5.0.4",
    "@types/webpack-bundle-analyzer": "^4.6.0",
    "@typescript-eslint/eslint-plugin": "^6.7.0",
    "@typescript-eslint/parser": "^6.7.0",
    "browserslist-config-erb": "^0.0.3",
    "chalk": "^4.1.2",
    "chromedriver": "^90.0.0",
    "concat-licenses": "^2.0.1",
    "concurrently": "^8.2.1",
    "core-js": "^3.32.2",
    "cross-env": "^7.0.3",
    "cross-spawn": "^7.0.3",
    "css-loader": "^6.8.1",
    "css-minimizer-webpack-plugin": "^5.0.1",
    "current-git-branch": "^1.1.0",
    "detect-port": "^1.5.1",
    "dotenv-webpack": "^8.0.1",
    "electron": "^32.2.1",
    "electron-builder": "^25.1.8",
    "electron-devtools-installer": "^3.2.0",
    "electronmon": "^2.0.3",
    "eslint": "^8.49.0",
    "eslint-config-airbnb": "^19.0.4",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-config-erb": "^4.1.0-0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-config-react-app": "^7.0.1",
    "eslint-formatter-pretty": "^4.1.0",
    "eslint-import-resolver-typescript": "^3.6.0",
    "eslint-import-resolver-webpack": "^0.13.7",
    "eslint-plugin-compat": "^4.2.0",
    "eslint-plugin-flowtype": "^8.0.3",
    "eslint-plugin-import": "^2.28.1",
    "eslint-plugin-jest": "^27.4.0",
    "eslint-plugin-jsx-a11y": "^6.7.1",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^6.1.1",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "express": "^4.17.1",
    "fbjs-scripts": "^1.2.0",
    "file-loader": "^6.2.0",
    "generate-license-file": "^3.0.1",
    "html-webpack-plugin": "^5.5.3",
    "husky": "^7.0.4",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "jsdom": "^11.0.0",
    "json-loader": "^0.5.7",
    "jsonwebtoken": "^8.5.1",
    "less": "^4.1.3",
    "less-loader": "^11.0.0",
    "lint-staged": "^8.1.0",
    "mini-css-extract-plugin": "^2.7.6",
    "npm": "^8.5.5",
    "playwright": "1.46.1",
    "prettier": "^3.2.5",
    "properties-reader": "^2.2.0",
    "raw-loader": "^4.0.2",
    "react-refresh": "^0.14.0",
    "react-test-renderer": "18.2.0",
    "redux-logger": "^3.0.6",
    "rimraf": "^5.0.1",
    "s3rver": "^3.7.1",
    "sass": "^1.67.0",
    "sass-loader": "^13.3.2",
    "serve-static": "^1.14.1",
    "shelljs": "^0.8.5",
    "shx": "^0.3.2",
    "sinon": "^2.3.1",
    "style-loader": "^3.3.3",
    "stylelint": "^15.11.0",
    "terser-webpack-plugin": "^5.3.9",
    "ts-jest": "^29.1.1",
    "ts-loader": "^9.4.4",
    "ts-node": "^10.9.1",
    "tsconfig-paths-webpack-plugin": "^4.1.0",
    "typescript": "^5.2.2",
    "url-loader": "^4.1.1",
    "webpack": "^5.88.2",
    "webpack-bundle-analyzer": "^4.9.1",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^4.15.1",
    "webpack-merge": "^5.9.0",
    "worker-loader": "^3.0.8"
  },
  "engines": {
    "npm": ">= 6.14.15",
    "yarn": "please-use-npm"
  },
  "devEngines": {
    "node": ">=14.x",
    "npm": ">=7.x"
  },
  "electronmon": {
    "patterns": [
      "!**/**",
      "src/main/**"
    ],
    "logLevel": "quiet"
  }
}
