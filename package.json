{
  "name": "tagspaces",
  "version": "0.0.0",
  "description": "TagSpaces Core Repository",
  "keywords": [
    "electron",
    "react",
    "taggin",
    "file-manager"
  ],
  "homepage": "https://www.tagspaces.org",
  "bugs": {
    "url": "https://github.com/tagspaces/tagspaces/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tagspaces/tagspaces/"
  },
  "license": "AGPL-3.0",
  "author": {
    "name": "TagSpaces UG (haftungsbeschraenkt)",
    "email": "info@tagspaces.org",
    "url": "https://www.tagspaces.org"
  },
  "scripts": {
    "browserslist:update": "npx browserslist@latest --update-db",
    "bs": "npm run build && npm run start",
    "prebuild": "rimraf app/dist && npm run version-meta && npm run prepare-node && npm run generate-jwt",
    "build": "npm run prebuild && concurrently \"npm run build-main\" \"npm run build-renderer\"",
    "build-cordova": "webpack --config ./configs/webpack.config.cordova.prod.babel.js",
    "build-cordova-dev": "webpack --config ./configs/webpack.config.cordova.dev.babel.js",
    "build-dll": "webpack --config ./configs/webpack.config.renderer.dev.dll.babel.js",
    "build-e2e": "node scripts/setup-tests.js && cross-env E2E_BUILD=true NODE_ENV=test npm run build",
    "build-e2e-dev": "rimraf app/dist && npm run version-meta && npm run prepare-node && cross-env E2E_BUILD=true concurrently \"npm run build-main\" \"npm run build-renderer\" \"npm run build-web-dev\"",
    "build-e2e-web": "node scripts/setup-tests.js && cross-env E2E_BUILD=true NODE_ENV=test && npm run prepare-web-pro && npm run build-web",
    "build-main": "webpack --config ./configs/webpack.config.main.prod.babel.js",
    "build-renderer": "webpack --config ./configs/webpack.config.renderer.prod.babel.js",
    "build-web": "rimraf web/dist && webpack --config ./configs/webpack.config.web.prod.babel.js",
    "build-web-dev": "rimraf web/dist && webpack --config ./configs/webpack.config.web.dev.babel.js",
    "bump-version": "npm run third-party && cd app && yarn version && cd .. && npm run version-meta",
    "check-extensions": "node scripts/checkExtensions.js",
    "clean": "rimraf node_modules && rimraf app/dist",
    "clean-maps": "rimraf app/dist/**/*.map && rimraf web/dist/**/*.map",
    "clean-pro": "npm run clean-maps",
    "cordova-add-android": "cd cordova && cordova platform add android@9.1.0 && cd ..",
    "cordova-add-ios": "cd cordova && cordova platform add ios && cd ..",
    "cordova-create-app": "cordova create ./cordova org.tagspaces.iosn TagSpaces",
    "cordova-list-emulators": "cd cordova && cordova run --list --emulator && cd ..",
    "cordova-remove-android": "cd cordova && cordova platform remove android && cd ..",
    "cordova-remove-ios": "cd cordova && cordova platform remove ios && cd ..",
    "dev": "npm run prepare-node && npm run generate-jwt && npm run check-extensions && cross-env START_HOT=1 node -r @babel/register ./internals/scripts/CheckPortInUse.js && cross-env START_HOT=1 npm run start-renderer-dev",
    "generate-jwt": "node scripts/jwt_generate.js",
    "install-ext-node-check": "npx cross-env PD_PLATFORM=node node scripts/checkWSinstalled.js",
    "install-ext-web-check": "npx cross-env PD_PLATFORM=web node scripts/checkWSinstalled.js",
    "install-ext-node": "rimraf app/node_modules && npx @tagspaces/dynamic-packages-loading ./app -p node",
    "install-ext-node-linux": "rimraf app/node_modules && npx @tagspaces/dynamic-packages-loading ./app -p node --platform=linux --arch=x64",
    "install-ext-node-mac": "rimraf app/node_modules && npx @tagspaces/dynamic-packages-loading ./app -p node --platform=darwin --arch=x64",
    "install-ext-node-mac-arm64": "rimraf app/node_modules && npx @tagspaces/dynamic-packages-loading ./app -p node --platform=darwin --arch=arm64",
    "install-ext-node-win": "rimraf app/node_modules && npx @tagspaces/dynamic-packages-loading ./app -p node --platform=win32 --arch=x64",
    "install-ext-web": "rimraf app/node_modules && npx @tagspaces/dynamic-packages-loading ./app -p web",
    "lint": "tsc --noEmit && eslint '*/**/*.{js,ts,tsx}'",
    "lint-fix": "npm run --silent lint --fix; exit 0",
    "postlint-fix": "prettier --ignore-path .eslintignore --single-quote --write '**/*.{*{js,jsx,json},babelrc,eslintrc,prettierrc,stylelintrc}'",
    "lint-old": "cross-env NODE_ENV=development eslint --cache --format=pretty .",
    "lint-styles": "stylelint --ignore-path .eslintignore '**/*.*(css|scss)' --syntax scss",
    "lint-styles-fix": "npm run --silent lint-styles --fix; exit 0",
    "postlint-styles-fix": "prettier --ignore-path .eslintignore --single-quote --write '**/*.{css,scss}'",
    "minio-start": "./tests/bin/minio server ./tests/testdata/file-structure",
    "minio-start-windows": "./tests/bin/minio.exe server ./tests/testdata/file-structure",
    "package": "npm run build && npm run package-win && npm run package-linux && npm run package-mac && npm run package-web",
    "package-android": "npm run build-cordova && cd cordova && npm install && cordova build --release android",
    "package-ci": "npm run postinstall && npm run build && electron-builder --publish always",
    "package-linux": "npm run install-ext-node-linux && electron-builder --linux --config resources/builder.json",
    "package-linux-pro": "npm run install-ext-node-linux && electron-builder --linux --config extensions/tagspacespro/resources/builder-pro.json",
    "package-mac": "npm run install-ext-node-mac && electron-builder --mac --x64 --config resources/builder.json",
    "package-mac-arm64": "npm run install-ext-node-mac-arm64 && electron-builder --mac --arm64 --config resources/builder.json",
    "package-mac-arm64-pro": "npm run install-ext-node-mac-arm64 && electron-builder --mac --arm64 --config extensions/tagspacespro/resources/builder-pro.json",
    "package-mac-pro": "npm run install-ext-node-mac && electron-builder --mac --x64 --config extensions/tagspacespro/resources/builder-pro.json",
    "package-pro": "rimraf app/node_modules && node scripts/enablepro.js && npm run install-ext-node && npm run build && npm run package-web-pro && npm run clean-maps && npm run package-win-pro && npm run package-linux-pro && npm run package-web-pro && npm run package-mac-pro",
    "package-web": "npm run prepare-web && zip -r ../builds/tagspaces-web.zip web -xi web/files/**\\* ",
    "package-web-pro": "npm run prepare-web-pro && zip -r ../builds/tagspaces-pro-web.zip web -xi web/files/**\\* ",
    "package-win": "npm run install-ext-node-win && electron-builder --win --x64 --config resources/builder.json",
    "package-win-pro": "npm run install-ext-node-win && electron-builder --win --x64 --config extensions/tagspacespro/resources/builder-pro.json",
    "paste-android-linux": "adb shell input text '$(xclip -selection c -o)'",
    "paste-android-macos": "adb shell input text \"'$(pbpaste)'\"",
    "playwright-show-trace": "npx playwright show-trace \"tests/test-reports/TST0813 - Delete file [web,minio,electron].zip\"",
    "postinstall-cordova-check": "cross-env PD_PLATFORM=cordova node scripts/postinstall.js",
    "postinstall-node-check": "cross-env PD_PLATFORM=node node scripts/postinstall.js",
    "postinstall-electron-check": "cross-env PD_PLATFORM=electron node scripts/postinstall.js",
    "postinstall-electron-debug": "cross-env PD_PLATFORM=electron npm install --foreground-scripts @tagspaces/tagspaces-platforms@1.3.45",
    "postinstall-aws-check": "cross-env PD_PLATFORM=aws node scripts/postinstall.js",
    "postinstall-web-check": "cross-env PD_PLATFORM=web node scripts/postinstall.js",
    "precommit": "lint-staged",
    "prepare": "husky install",
    "prepare-cordova": "npm run install-ext-web-check && npm run postinstall-cordova-check && rimraf cordova/www/dist && rimraf cordova/www/node_modules && shx cp -rL app/node_modules cordova/www && shx cp LICENSE.txt cordova/www",
    "prepare-cordova-pro": "npm run install-ext-web-check && npm run postinstall-cordova-check && rimraf cordova/www/dist && rimraf cordova/www/node_modules && shx cp -rL app/node_modules cordova/www && shx cp extensions/tagspacespro/EULA.txt cordova/www",
    "prepare-node": "npm run install-ext-node-check && npm run postinstall-electron-check",
    "prepare-web": "npm run version-meta && npm run install-ext-web-check && npm run postinstall-aws-check && rimraf web/node_modules && shx cp -rL app/node_modules/ web && shx cp LICENSE.txt web && npm run clean-maps && npm run build-web && node scripts/genswconf.js",
    "prepare-web-pro": "npm run version-meta && npm run install-ext-web-check && npm run postinstall-aws-check && rimraf web/node_modules && shx cp -rL app/node_modules/ web && shx cp extensions/tagspacespro/EULA.txt web && npm run clean-maps && npm run build-web && node scripts/genswconf.js",
    "prettier-check": "prettier --check **/*.{js,json,ts,tsx,yml}",
    "prettier-format": "prettier --write **/*.{js,jsx,json,ts,tsx,yml}",
    "run-android": "npm run prepare-cordova && npm run build-cordova && cd cordova && cordova run android && cd ..",
    "run-android-dev": "npm run prepare-cordova && npm run build-cordova-dev && cd cordova && cordova run android && cd ..",
    "run-ios-dev": "npm run prepare-cordova && npm run build-cordova-dev && cd cordova && cordova run ios && cd ..",
    "run-web": "npm run prepare-web-pro && npm run build-web && node scripts/webserver.js",
    "run-web-aws": "npm run prepare-web-pro && node scripts/webserver.js",
    "run-web-dev": "npm run prepare-web-pro && npm run build-web-dev && node scripts/webserver.js",
    "setup-ext": "node scripts/setupextensions.js",
    "setup-pro": "node scripts/setuppro.js",
    "setup-tests": "node scripts/setup-tests.js",
    "skip:husky:pre-commit": "node -e \"require('fs').rename('./.git/hooks/pre-commit', './.git/hooks/pre-commit.disabled', function(err) { if (err) console.log(err); console.log('File successfully renamed!') })\"",
    "sort-package-json": "npx sort-package-json",
    "source-map": "npm run source-map-app && npm run source-map-web && npm run source-map-cordova",
    "source-map-app": "source-map-explorer app/dist/*.* --html reports/source-map-app.html",
    "source-map-cordova": "source-map-explorer cordova/www/dist/*.* --html reports/source-map-cordova.html",
    "source-map-web": "source-map-explorer web/dist/*.* --html reports/source-map-web.html",
    "start": "cross-env NODE_ENV=production electron ./app/",
    "start-chrome-driver": "./node_modules/.bin/chromedriver --url-base=/ --port=9515 --no-sandbox --disable-dev-shm-usage",
    "start-main-dev": "cross-env HOT=1 NODE_ENV=development electron ./app/main.dev.babel.js",
    "start-renderer-dev": "cross-env NODE_ENV=development webpack-dev-server --config configs/webpack.config.renderer.dev.babel.js",
    "test-all": "npm run build && npm run test-unit && npm run build-e2e && npm run test-e2e",
    "test-e2e-dev": "cross-env NODE_ENV=test BABEL_DISABLE_CACHE=1 node --trace-warnings ./tests/runTests.js e2e-dev",
    "test-e2e-electron": "node -r @babel/register ./internals/scripts/CheckBuiltsExist.js && cross-env NODE_ENV=test HEADLESS_MODE=true jest --config=jest.config.js -t 'electron' --verbose ./tests/e2e/",
    "test-e2e-electron-minio": "node -r @babel/register ./internals/scripts/CheckBuiltsExist.js && cross-env HEADLESS_MODE=true jest --config=jest.config.minio.js -t 'minio' --verbose ./tests/e2e/",
    "test-e2e-live": "node -r @babel/register ./internals/scripts/CheckBuiltsExist.js && cross-env NODE_ENV=test testcafe-live electron:./ ./test/e2e/HomePage.e2e.ts",
    "test-e2e-old": "cross-env NODE_ENV=test BABEL_DISABLE_CACHE=1 node --trace-warnings ./tests/runTests.js e2e",
    "test-e2e-web": "npm run prepare-web-pro && npm run build-web && cross-env HEADLESS_MODE=true jest --config=jest.config.web.js -t 'web' --verbose ./tests/e2e/",
    "test-e2e-web-all": "npm run prepare-web-pro && npm run build-web && jest --config=jest.config.web.js --verbose ./tests/e2e/",
    "test-old": "cross-env NODE_ENV=test BABEL_DISABLE_CACHE=1 node --trace-warnings ./test/runTests.js",
    "test-one": "cross-env HEADLESS_MODE=true jest --detectOpenHandles --config=jest.config.web.js -t 'TST5016' --runInBand --verbose ./tests/e2e/",
    "test-one-suite": "cross-env  jest --config=jest.config.web.js --verbose ./tests/e2e/perspective-grid-right-button.e2e.js",
    "test-one-suite-headless": "cross-env HEADLESS_MODE=true jest --config=jest.config.web.js --verbose ./tests/e2e/fileopener.e2e.js",
    "test-playwright": "npm run test-refresh-data && cross-env JEST_JUNIT_OUTPUT_DIR=./tests NODE_ENV=test jest --config=jest.config.playwright.js -t 'electron' --verbose ./tests/e2e/",
    "test-playwright-web": "npm run test-refresh-data && npm run prepare-web-pro && cross-env NODE_ENV=test SHOW_CONSOLE=true DEBUG=pw:api PLAYWRIGHT=test_playwright jest --config=jest.config.web.js -t 'web' --verbose ./tests/e2e/",
    "test-playwright-web-headless": "npm run test-refresh-data && npm run prepare-web-pro && cross-env NODE_ENV=test SHOW_CONSOLE=true JEST_JUNIT_OUTPUT_DIR=./tests PLAYWRIGHT=test_playwright HEADLESS_MODE=true jest --config=jest.config.web.js -t 'web' --verbose ./tests/e2e/",
    "test-refresh-data": "rimraf tests/testdata-tmp && shx mkdir -p tests/testdata-tmp/file-structure && shx cp -rL tests/testdata/file-structure tests/testdata-tmp",
    "test-unit": "cross-env NODE_JEST=unit_test BABEL_DISABLE_CACHE=1 jest --config=jest.config.unit.js --verbose ./tests/unit/",
    "test-watch": "npm run test --watch",
    "third-party": "npx generate-license-file --input package.json --output app/third-party.txt --overwrite",
    "type-check": "tsc --noEmit",
    "update-changelog": "git log v5.0.5..HEAD --no-merges --format=%B > CHANGELOG.TXT",
    "update-changelog-pro": "cd extensions/tagspacespro && git log v5.0.4..HEAD --no-merges --format=%B > ../../CHANGELOG-PRO.TXT",
    "update-i18n": "tx pull -a -f",
    "version-meta": "node scripts/versionmeta.js",
    "linux-fix-sandbox": "sudo chown root:root node_modules/electron/dist/chrome-sandbox && sudo chmod 4755 node_modules/electron/dist/chrome-sandbox",
    "ts-extension-symlink": "rimraf app/node_modules/@tagspaces/extensions && cd app/node_modules/@tagspaces && ln -s ../../../extensions extensions && cd ../../.."
  },
  "dependencies": {
    "@aws-amplify/ui-react": "^1.2.26",
    "@date-io/date-fns": "^2.16.0",
    "@elife/pm2": "^3.6.1",
    "@emotion/react": "11.10.0",
    "@emotion/styled": "11.10.0",
    "@gorillastack/jmespath": "^1.3.0",
    "@mui/icons-material": "^5.8.4",
    "@mui/lab": "^5.0.0-alpha.109",
    "@mui/material": "5.10.15",
    "@mui/styles": "5.10.15",
    "@mui/x-date-pickers": "^5.0.8",
    "@tagspaces/tagspaces-md": "2.0.52",
    "@tagspaces/tagspaces-platforms": "2.0.45",
    "aws-amplify": "^4.3.8",
    "aws-sdk": "^2.1036.0",
    "babel-polyfill": "^6.26.0",
    "bytesize-icons": "^1.4.0",
    "classnames": "^2.3.1",
    "clone": "^2.1.2",
    "coordinate-parser": "^1.0.7",
    "core-js": "3.19.1",
    "crypto-js": "^4.1.1",
    "csv-stringify": "^6.1.0",
    "date-fns": "^2.29.3",
    "dompurify": "^2.3.3",
    "electron-deeplink": "^1.0.10",
    "electron-is-dev": "^2.0.0",
    "electron-window-state": "^5.0.3",
    "exif-js": "^2.3.0",
    "file-saver": "^2.0.5",
    "fs-extra": "^10.0.0",
    "fscreen": "^1.2.0",
    "fuse.js": "^6.4.6",
    "geolocation-utils": "^1.2.5",
    "html2canvas": "^1.3.3",
    "i18next": "^20.3.5",
    "i18next-browser-languagedetector": "^6.1.2",
    "i18next-http-backend": "^1.2.8",
    "jszip": "^3.7.1",
    "leaflet": "^1.7.1",
    "marked": "^4.0.12",
    "mgrs": "^1.0.0",
    "open-location-code": "^1.0.3",
    "open-location-code-typescript": "^1.5.0",
    "pdfjs-dist": "2.4.456",
    "qrcode.react": "^1.0.1",
    "rc-table": "^7.8.0",
    "react": "17.0.2",
    "react-beautiful-dnd": "^13.1.1",
    "react-best-gradient-color-picker": "^2.0.21",
    "react-color": "^2.19.3",
    "react-dnd": "^14.0.4",
    "react-dnd-html5-backend": "^14.0.2",
    "react-dom": "17.0.2",
    "react-draggable": "^4.4.4",
    "react-hot-loader": "^4.8.2",
    "react-hotkeys": "^2.0.0",
    "react-i18next": "^4.6.1",
    "react-image-gallery": "^1.2.7",
    "react-infinite-scroller": "^1.2.6",
    "react-leaflet": "^2.8.0",
    "react-redux": "^8.0.2",
    "react-swipeable-views": "0.14.0",
    "redux": "^4.2.0",
    "redux-persist": "^5.10.0",
    "redux-thunk": "^2.4.1",
    "semver": "^7.3.5",
    "source-map-support": "^0.5.21",
    "ts-react-splitter": "^3.0.0",
    "use-state-with-callback": "^2.0.3",
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.16.0",
    "@babel/plugin-proposal-class-properties": "^7.16.0",
    "@babel/plugin-proposal-decorators": "^7.16.4",
    "@babel/plugin-proposal-do-expressions": "^7.16.0",
    "@babel/plugin-proposal-export-default-from": "^7.16.0",
    "@babel/plugin-proposal-export-namespace-from": "^7.16.0",
    "@babel/plugin-proposal-function-bind": "^7.16.0",
    "@babel/plugin-proposal-function-sent": "^7.16.0",
    "@babel/plugin-proposal-json-strings": "^7.16.0",
    "@babel/plugin-proposal-logical-assignment-operators": "^7.16.0",
    "@babel/plugin-proposal-nullish-coalescing-operator": "^7.16.0",
    "@babel/plugin-proposal-numeric-separator": "^7.16.0",
    "@babel/plugin-proposal-optional-chaining": "^7.16.0",
    "@babel/plugin-proposal-pipeline-operator": "^7.16.0",
    "@babel/plugin-proposal-throw-expressions": "^7.16.0",
    "@babel/plugin-syntax-dynamic-import": "^7.8.3",
    "@babel/plugin-syntax-import-meta": "^7.10.4",
    "@babel/plugin-transform-react-constant-elements": "^7.17.6",
    "@babel/plugin-transform-react-inline-elements": "^7.16.7",
    "@babel/preset-env": "^7.17.10",
    "@babel/preset-react": "^7.16.7",
    "@babel/preset-typescript": "^7.16.7",
    "@babel/register": "^7.17.7",
    "@playwright/test": "1.22.2",
    "@tagspaces/dynamic-packages-loading": "^2.0.5",
    "@types/jest": "^26.0.10",
    "@types/react": "^17.0.48",
    "@types/react-dom": "^17.0.17",
    "@types/react-redux": "^7.1.24",
    "@types/react-router-dom": "^5.3.3",
    "@types/redux-logger": "^3.0.9",
    "@typescript-eslint/eslint-plugin": "^5.24.0",
    "@typescript-eslint/parser": "^5.24.0",
    "babel-core": "7.0.0-bridge.0",
    "babel-jest": "^28.1.0",
    "babel-loader": "^8.2.5",
    "babel-plugin-dev-expression": "^0.2.3",
    "babel-plugin-module-resolver": "^4.1.0",
    "babel-plugin-transform-react-remove-prop-types": "^0.4.24",
    "chalk": "^2.4.1",
    "chromedriver": "^90.0.0",
    "concat-licenses": "^2.0.1",
    "concurrently": "^4.1.0",
    "cross-env": "^5.2.0",
    "cross-spawn": "^7.0.3",
    "css-loader": "^6.7.1",
    "css-minimizer-webpack-plugin": "^4.2.0",
    "current-git-branch": "^1.1.0",
    "detect-port": "^1.3.0",
    "dotenv-webpack": "^8.0.1",
    "electron": "20.3.5",
    "electron-builder": "^23.6.0",
    "electron-devtools-installer": "^3.2.0",
    "electron-notarize": "^1.2.2",
    "eslint": "^8.0.0",
    "eslint-config-airbnb": "^19.0.4",
    "eslint-config-prettier": "^8.5.0",
    "eslint-config-react-app": "^7.0.1",
    "eslint-formatter-pretty": "^4.1.0",
    "eslint-import-resolver-webpack": "^0.13.2",
    "eslint-plugin-compat": "^4.0.2",
    "eslint-plugin-flowtype": "^8.0.3",
    "eslint-plugin-import": "^2.26.0",
    "eslint-plugin-jest": "^26.2.2",
    "eslint-plugin-jsx-a11y": "6.5.1",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^6.0.0",
    "eslint-plugin-react": "^7.29.4",
    "eslint-plugin-react-hooks": "^4.5.0",
    "express": "^4.17.1",
    "fbjs-scripts": "^1.2.0",
    "file-loader": "^6.2.0",
    "generate-license-file": "^1.3.0",
    "husky": "^7.0.4",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^26.4.0",
    "jest-html-reporter": "^3.1.3",
    "jest-junit": "^12.0.0",
    "jsdom": "^11.0.0",
    "json-loader": "^0.5.7",
    "jsonwebtoken": "^8.5.1",
    "less": "^4.1.3",
    "less-loader": "^11.0.0",
    "lint-staged": "^8.1.0",
    "mini-css-extract-plugin": "^2.6.1",
    "node-polyfill-webpack-plugin": "^2.0.1",
    "npm": "^8.5.5",
    "playwright": "1.22.2",
    "prettier": "1.19.1",
    "properties-reader": "^2.2.0",
    "raw-loader": "^4.0.2",
    "react-test-renderer": "^17.0.2",
    "redux-logger": "^3.0.6",
    "rimraf": "^2.6.3",
    "sass": "^1.55.0",
    "sass-loader": "^13.0.2",
    "serve-static": "^1.14.1",
    "sharp": "^0.30.7",
    "shelljs": "^0.8.4",
    "shx": "^0.3.2",
    "sinon": "^2.3.1",
    "style-loader": "^1.1.2",
    "stylelint": "^9.9.0",
    "stylelint-config-prettier": "^4.0.0",
    "stylelint-config-standard": "^18.2.0",
    "ts-loader": "^6.2.1",
    "typescript": "4.6.4",
    "url-loader": "^3.0.0",
    "webpack": "^5.74.0",
    "webpack-bundle-analyzer": "^4.6.1",
    "webpack-cli": "^4.10.0",
    "webpack-dev-server": "^4.11.1",
    "webpack-merge": "^5.8.0",
    "worker-loader": "^3.0.8"
  },
  "devEngines": {
    "node": ">=8.x",
    "npm": ">=5.x"
  },
  "jest-junit": {
    "suiteNameTemplate": "{filepath}",
    "classNameTemplate": "{classname}",
    "titleTemplate": "{title}"
  },
  "engines": {
    "yarn": "please-use-npm",
    "npm": ">= 6.14.15"
  }
}
